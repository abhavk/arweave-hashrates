{"version":3,"file":"DefaultMutationAdapter.js","sourceRoot":"","sources":["../../src/adapters/DefaultMutationAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n@class DefaultMutationAdapter\n@desc A basic implementation to use\n@desc modify the output of the mutation template by passing a second argument to mutation(options, AdapterClass)\n */\nimport Fields from \"../Fields\";\nimport IQueryBuilderOptions from \"../IQueryBuilderOptions\";\nimport OperationType from \"../OperationType\";\nimport Utils from \"../Utils\";\nimport IMutationAdapter from \"./IMutationAdapter\";\n\nexport default class DefaultMutationAdapter implements IMutationAdapter {\n  private variables: any | undefined;\n  private fields: Fields | undefined;\n  private operation!: string;\n\n  constructor(options: IQueryBuilderOptions | IQueryBuilderOptions[]) {\n    if (Array.isArray(options)) {\n      this.variables = Utils.resolveVariables(options);\n    } else {\n      this.variables = options.variables;\n      this.fields = options.fields;\n      this.operation = options.operation;\n    }\n  }\n\n  public mutationBuilder() {\n    return this.operationWrapperTemplate(\n      OperationType.Mutation,\n      this.variables,\n      this.operationTemplate(this.operation)\n    );\n  }\n\n  public mutationsBuilder(mutations: IQueryBuilderOptions[]) {\n    const content = mutations.map((opts) => {\n      this.operation = opts.operation;\n      this.variables = opts.variables;\n      this.fields = opts.fields;\n      return this.operationTemplate(opts.operation);\n    });\n    return this.operationWrapperTemplate(\n      OperationType.Mutation,\n      Utils.resolveVariables(mutations),\n      content.join(\"\\n  \")\n    );\n  }\n\n  private queryDataArgumentAndTypeMap(variablesUsed: any): string {\n    if (this.fields && typeof this.fields === \"object\") {\n      variablesUsed = {\n        ...Utils.getNestedVariables(this.fields),\n        ...variablesUsed,\n      };\n    }\n    return variablesUsed && Object.keys(variablesUsed).length > 0\n      ? `(${Object.keys(variablesUsed).reduce(\n          (dataString, key, i) =>\n            `${dataString}${i !== 0 ? \", \" : \"\"}$${key}: ${Utils.queryDataType(\n              variablesUsed[key]\n            )}`,\n          \"\"\n        )})`\n      : \"\";\n  }\n\n  // start of mutation building\n  private operationWrapperTemplate(\n    type: OperationType,\n    variables: any,\n    content: string\n  ) {\n    return {\n      query: `${type} ${this.queryDataArgumentAndTypeMap(variables)} {\n  ${content}\n}`,\n      variables: Utils.queryVariablesMap(variables, this.fields),\n    };\n  }\n\n  private operationTemplate(operation: string) {\n    return `${operation} ${Utils.queryDataNameAndArgumentMap(this.variables)} ${\n      this.fields && this.fields.length > 0\n        ? `{\n    ${Utils.queryFieldsMap(this.fields)}\n  }`\n        : \"\"\n    }`;\n  }\n}\n"]}